"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/reports/page",{

/***/ "(app-pages-browser)/./lib/api.js":
/*!********************!*\
  !*** ./lib/api.js ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeMVPOpportunity: function() { return /* binding */ analyzeMVPOpportunity; },\n/* harmony export */   analyzeReviews: function() { return /* binding */ analyzeReviews; },\n/* harmony export */   compareAnalysis: function() { return /* binding */ compareAnalysis; },\n/* harmony export */   deleteCachedReviews: function() { return /* binding */ deleteCachedReviews; },\n/* harmony export */   getAnalysis: function() { return /* binding */ getAnalysis; },\n/* harmony export */   getAppDetails: function() { return /* binding */ getAppDetails; },\n/* harmony export */   getCachedAnalysis: function() { return /* binding */ getCachedAnalysis; },\n/* harmony export */   getCachedReviews: function() { return /* binding */ getCachedReviews; },\n/* harmony export */   getCategories: function() { return /* binding */ getCategories; },\n/* harmony export */   getReviews: function() { return /* binding */ getReviews; },\n/* harmony export */   getSimilarApps: function() { return /* binding */ getSimilarApps; },\n/* harmony export */   identifyMarketGaps: function() { return /* binding */ identifyMarketGaps; },\n/* harmony export */   searchApps: function() { return /* binding */ searchApps; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:30011/api\" || 0;\n/**\n * Search for apps by term or category\n * @param {Object} options - Search options\n * @param {string} options.term - Search term (optional)\n * @param {number} options.category - App Store category ID (optional)\n * @returns {Promise<Object>} - Search results\n */ async function searchApps(options) {\n    const params = new URLSearchParams();\n    if (options.term) params.append(\"term\", options.term);\n    if (options.category) params.append(\"category\", options.category);\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/search?\").concat(params.toString()));\n    if (!response.ok) {\n        throw new Error(\"Error searching apps\");\n    }\n    return response.json();\n}\n/**\n * Get app details by ID\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - App details\n */ async function getAppDetails(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/\").concat(appId));\n    if (!response.ok) {\n        throw new Error(\"Error getting app details\");\n    }\n    return response.json();\n}\n/**\n * Get similar apps based on an app ID\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - Similar apps\n */ async function getSimilarApps(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/\").concat(appId, \"/similar\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting similar apps\");\n    }\n    return response.json();\n}\n/**\n * Get app categories\n * @returns {Promise<Object>} - App categories\n */ async function getCategories() {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/categories/list\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting categories\");\n    }\n    return response.json();\n}\n/**\n * Get reviews for an app\n * @param {string} appId - App Store ID\n * @param {boolean} force - Force refresh from App Store (optional)\n * @returns {Promise<Object>} - Reviews\n */ async function getReviews(appId) {\n    let force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const params = new URLSearchParams();\n    if (force) params.append(\"force\", \"true\");\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/reviews/\").concat(appId, \"?\").concat(params.toString()));\n    if (!response.ok) {\n        throw new Error(\"Error getting reviews\");\n    }\n    return response.json();\n}\n/**\n * Get cached reviews list\n * @returns {Promise<Object>} - Cached reviews list\n */ async function getCachedReviews() {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/reviews/cached/list\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting cached reviews\");\n    }\n    return response.json();\n}\n/**\n * Delete cached reviews for an app\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - Result\n */ async function deleteCachedReviews(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/reviews/\").concat(appId), {\n        method: \"DELETE\"\n    });\n    if (!response.ok) {\n        throw new Error(\"Error deleting cached reviews\");\n    }\n    return response.json();\n}\n/**\n * Analyze reviews for an app\n * @param {string} appId - App Store ID\n * @param {boolean} force - Force reanalysis (optional)\n * @returns {Promise<Object>} - Analysis results\n */ async function analyzeReviews(appId) {\n    let force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const params = new URLSearchParams();\n    if (force) params.append(\"force\", \"true\");\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/\").concat(appId, \"?\").concat(params.toString()), {\n        method: \"POST\"\n    });\n    if (!response.ok) {\n        throw new Error(\"Error analyzing reviews\");\n    }\n    return response.json();\n}\n/**\n * Get analysis for an app\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - Analysis results\n */ async function getAnalysis(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/\").concat(appId));\n    if (!response.ok) {\n        throw new Error(\"Error getting analysis\");\n    }\n    return response.json();\n}\n/**\n * Get cached analysis list\n * @returns {Promise<Object>} - Cached analysis list\n */ async function getCachedAnalysis() {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/cached/list\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting cached analysis\");\n    }\n    return response.json();\n}\n/**\n * Compare analysis of multiple apps\n * @param {Array} appIds - List of app IDs to compare\n * @returns {Promise<Object>} - Comparison results\n */ async function compareAnalysis(appIds) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/compare\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            appIds\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Error comparing analysis\");\n    }\n    return response.json();\n}\n/**\n * Identify market gaps based on app analysis\n * @param {Array} appIds - List of app IDs to analyze\n * @returns {Promise<Object>} - Market gap analysis\n */ async function identifyMarketGaps(appIds) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/market-gaps\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            appIds\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Error identifying market gaps\");\n    }\n    return response.json();\n}\n/**\n * Analyze opportunity for building an MVP based on similar apps\n * @param {Array} appIds - List of similar app IDs to analyze\n * @param {number} category - App category ID (optional)\n * @returns {Promise<Object>} - MVP opportunity analysis\n */ async function analyzeMVPOpportunity(appIds, category) {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/mvp-opportunity\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                appIds,\n                category\n            })\n        });\n        if (!response.ok) {\n            // Try to get error message from response\n            try {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Error analyzing MVP opportunity\");\n            } catch (e) {\n                throw new Error(\"Error analyzing MVP opportunity\");\n            }\n        }\n        const data = await response.json();\n        // If the backend didn't return valid opportunity data, provide fallback\n        if (!data.data || !data.success) {\n            return {\n                success: true,\n                data: {\n                    marketGaps: [],\n                    mvpOpportunityScore: {\n                        score: 0,\n                        reasoning: \"Analysis could not be completed due to insufficient data\"\n                    },\n                    mvpRecommendedFeatures: {\n                        core: [],\n                        differentiators: [],\n                        potential: []\n                    },\n                    aiInsights: null,\n                    appsAnalyzed: appIds,\n                    analysisDate: new Date().toISOString(),\n                    category: category || \"Unknown\",\n                    dataQuality: {\n                        appsWithReviews: 0,\n                        totalApps: appIds.length,\n                        error: true\n                    }\n                }\n            };\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in analyzeMVPOpportunity:\", error);\n        // Return fallback data instead of throwing error\n        return {\n            success: true,\n            data: {\n                marketGaps: [],\n                mvpOpportunityScore: {\n                    score: 0,\n                    reasoning: \"Analysis could not be completed. Please try with different apps that have more reviews.\"\n                },\n                mvpRecommendedFeatures: {\n                    core: [],\n                    differentiators: [],\n                    potential: []\n                },\n                aiInsights: null,\n                appsAnalyzed: appIds,\n                analysisDate: new Date().toISOString(),\n                category: category || \"Unknown\",\n                dataQuality: {\n                    appsWithReviews: 0,\n                    totalApps: appIds.length,\n                    error: true\n                }\n            }\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QjZDLGFBQWE7d0JBQ1hDLGlCQUFpQjt3QkFDakJDLFdBQVczQixPQUFPNEIsTUFBTTt3QkFDeEJDLE9BQU87b0JBQ1Q7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsT0FBT25CO0lBQ1QsRUFBRSxPQUFPbUIsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsbUNBQW1DQTtRQUVqRCxpREFBaUQ7UUFDakQsT0FBTztZQUNMbEIsU0FBUztZQUNURCxNQUFNO2dCQUNKRSxZQUFZLEVBQUU7Z0JBQ2RDLHFCQUFxQjtvQkFBRUMsT0FBTztvQkFBR0MsV0FBVztnQkFBMEY7Z0JBQ3RJQyx3QkFBd0I7b0JBQUVDLE1BQU0sRUFBRTtvQkFBRUMsaUJBQWlCLEVBQUU7b0JBQUVDLFdBQVcsRUFBRTtnQkFBQztnQkFDdkVDLFlBQVk7Z0JBQ1pDLGNBQWNyQjtnQkFDZHNCLGNBQWMsSUFBSUMsT0FBT0MsV0FBVztnQkFDcEM1QyxVQUFVQSxZQUFZO2dCQUN0QjZDLGFBQWE7b0JBQ1hDLGlCQUFpQjtvQkFDakJDLFdBQVczQixPQUFPNEIsTUFBTTtvQkFDeEJDLE9BQU87Z0JBQ1Q7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvYXBpLmpzPzQ1NDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVBJX0JBU0VfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaSc7XG5cbi8qKlxuICogU2VhcmNoIGZvciBhcHBzIGJ5IHRlcm0gb3IgY2F0ZWdvcnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU2VhcmNoIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRlcm0gLSBTZWFyY2ggdGVybSAob3B0aW9uYWwpXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5jYXRlZ29yeSAtIEFwcCBTdG9yZSBjYXRlZ29yeSBJRCAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSAtIFNlYXJjaCByZXN1bHRzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hBcHBzKG9wdGlvbnMpIHtcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBpZiAob3B0aW9ucy50ZXJtKSBwYXJhbXMuYXBwZW5kKCd0ZXJtJywgb3B0aW9ucy50ZXJtKTtcbiAgaWYgKG9wdGlvbnMuY2F0ZWdvcnkpIHBhcmFtcy5hcHBlbmQoJ2NhdGVnb3J5Jywgb3B0aW9ucy5jYXRlZ29yeSk7XG4gIFxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBwcy9zZWFyY2g/JHtwYXJhbXMudG9TdHJpbmcoKX1gKTtcbiAgXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHNlYXJjaGluZyBhcHBzJyk7XG4gIH1cbiAgXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogR2V0IGFwcCBkZXRhaWxzIGJ5IElEXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwSWQgLSBBcHAgU3RvcmUgSURcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gQXBwIGRldGFpbHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFwcERldGFpbHMoYXBwSWQpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwcHMvJHthcHBJZH1gKTtcbiAgXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGdldHRpbmcgYXBwIGRldGFpbHMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBHZXQgc2ltaWxhciBhcHBzIGJhc2VkIG9uIGFuIGFwcCBJRFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcElkIC0gQXBwIFN0b3JlIElEXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSAtIFNpbWlsYXIgYXBwc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2ltaWxhckFwcHMoYXBwSWQpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwcHMvJHthcHBJZH0vc2ltaWxhcmApO1xuICBcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgZ2V0dGluZyBzaW1pbGFyIGFwcHMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBHZXQgYXBwIGNhdGVnb3JpZXNcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gQXBwIGNhdGVnb3JpZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhdGVnb3JpZXMoKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcHBzL2NhdGVnb3JpZXMvbGlzdGApO1xuICBcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgZ2V0dGluZyBjYXRlZ29yaWVzJyk7XG4gIH1cbiAgXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogR2V0IHJldmlld3MgZm9yIGFuIGFwcFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcElkIC0gQXBwIFN0b3JlIElEXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlIC0gRm9yY2UgcmVmcmVzaCBmcm9tIEFwcCBTdG9yZSAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSAtIFJldmlld3NcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJldmlld3MoYXBwSWQsIGZvcmNlID0gZmFsc2UpIHtcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBpZiAoZm9yY2UpIHBhcmFtcy5hcHBlbmQoJ2ZvcmNlJywgJ3RydWUnKTtcbiAgXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9yZXZpZXdzLyR7YXBwSWR9PyR7cGFyYW1zLnRvU3RyaW5nKCl9YCk7XG4gIFxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBnZXR0aW5nIHJldmlld3MnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBHZXQgY2FjaGVkIHJldmlld3MgbGlzdFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBDYWNoZWQgcmV2aWV3cyBsaXN0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYWNoZWRSZXZpZXdzKCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vcmV2aWV3cy9jYWNoZWQvbGlzdGApO1xuICBcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgZ2V0dGluZyBjYWNoZWQgcmV2aWV3cycpO1xuICB9XG4gIFxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG4vKipcbiAqIERlbGV0ZSBjYWNoZWQgcmV2aWV3cyBmb3IgYW4gYXBwXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwSWQgLSBBcHAgU3RvcmUgSURcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gUmVzdWx0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVDYWNoZWRSZXZpZXdzKGFwcElkKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9yZXZpZXdzLyR7YXBwSWR9YCwge1xuICAgIG1ldGhvZDogJ0RFTEVURSdcbiAgfSk7XG4gIFxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBkZWxldGluZyBjYWNoZWQgcmV2aWV3cycpO1xuICB9XG4gIFxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG4vKipcbiAqIEFuYWx5emUgcmV2aWV3cyBmb3IgYW4gYXBwXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwSWQgLSBBcHAgU3RvcmUgSURcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2UgLSBGb3JjZSByZWFuYWx5c2lzIChvcHRpb25hbClcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gQW5hbHlzaXMgcmVzdWx0c1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYW5hbHl6ZVJldmlld3MoYXBwSWQsIGZvcmNlID0gZmFsc2UpIHtcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBpZiAoZm9yY2UpIHBhcmFtcy5hcHBlbmQoJ2ZvcmNlJywgJ3RydWUnKTtcbiAgXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hbmFseXNpcy8ke2FwcElkfT8ke3BhcmFtcy50b1N0cmluZygpfWAsIHtcbiAgICBtZXRob2Q6ICdQT1NUJ1xuICB9KTtcbiAgXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGFuYWx5emluZyByZXZpZXdzJyk7XG4gIH1cbiAgXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogR2V0IGFuYWx5c2lzIGZvciBhbiBhcHBcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBJZCAtIEFwcCBTdG9yZSBJRFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBBbmFseXNpcyByZXN1bHRzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbmFseXNpcyhhcHBJZCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYW5hbHlzaXMvJHthcHBJZH1gKTtcbiAgXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGdldHRpbmcgYW5hbHlzaXMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBHZXQgY2FjaGVkIGFuYWx5c2lzIGxpc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gQ2FjaGVkIGFuYWx5c2lzIGxpc3RcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhY2hlZEFuYWx5c2lzKCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYW5hbHlzaXMvY2FjaGVkL2xpc3RgKTtcbiAgXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGdldHRpbmcgY2FjaGVkIGFuYWx5c2lzJyk7XG4gIH1cbiAgXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogQ29tcGFyZSBhbmFseXNpcyBvZiBtdWx0aXBsZSBhcHBzXG4gKiBAcGFyYW0ge0FycmF5fSBhcHBJZHMgLSBMaXN0IG9mIGFwcCBJRHMgdG8gY29tcGFyZVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBDb21wYXJpc29uIHJlc3VsdHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXBhcmVBbmFseXNpcyhhcHBJZHMpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FuYWx5c2lzL2NvbXBhcmVgLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhcHBJZHMgfSlcbiAgfSk7XG4gIFxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBjb21wYXJpbmcgYW5hbHlzaXMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBJZGVudGlmeSBtYXJrZXQgZ2FwcyBiYXNlZCBvbiBhcHAgYW5hbHlzaXNcbiAqIEBwYXJhbSB7QXJyYXl9IGFwcElkcyAtIExpc3Qgb2YgYXBwIElEcyB0byBhbmFseXplXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSAtIE1hcmtldCBnYXAgYW5hbHlzaXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlkZW50aWZ5TWFya2V0R2FwcyhhcHBJZHMpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FuYWx5c2lzL21hcmtldC1nYXBzYCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYXBwSWRzIH0pXG4gIH0pO1xuICBcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgaWRlbnRpZnlpbmcgbWFya2V0IGdhcHMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLyoqXG4gKiBBbmFseXplIG9wcG9ydHVuaXR5IGZvciBidWlsZGluZyBhbiBNVlAgYmFzZWQgb24gc2ltaWxhciBhcHBzXG4gKiBAcGFyYW0ge0FycmF5fSBhcHBJZHMgLSBMaXN0IG9mIHNpbWlsYXIgYXBwIElEcyB0byBhbmFseXplXG4gKiBAcGFyYW0ge251bWJlcn0gY2F0ZWdvcnkgLSBBcHAgY2F0ZWdvcnkgSUQgKG9wdGlvbmFsKVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBNVlAgb3Bwb3J0dW5pdHkgYW5hbHlzaXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFuYWx5emVNVlBPcHBvcnR1bml0eShhcHBJZHMsIGNhdGVnb3J5KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FuYWx5c2lzL212cC1vcHBvcnR1bml0eWAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgYXBwSWRzLFxuICAgICAgICBjYXRlZ29yeVxuICAgICAgfSlcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAvLyBUcnkgdG8gZ2V0IGVycm9yIG1lc3NhZ2UgZnJvbSByZXNwb25zZVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JEYXRhLm1lc3NhZ2UgfHwgJ0Vycm9yIGFuYWx5emluZyBNVlAgb3Bwb3J0dW5pdHknKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbmFseXppbmcgTVZQIG9wcG9ydHVuaXR5Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgXG4gICAgLy8gSWYgdGhlIGJhY2tlbmQgZGlkbid0IHJldHVybiB2YWxpZCBvcHBvcnR1bml0eSBkYXRhLCBwcm92aWRlIGZhbGxiYWNrXG4gICAgaWYgKCFkYXRhLmRhdGEgfHwgIWRhdGEuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG1hcmtldEdhcHM6IFtdLFxuICAgICAgICAgIG12cE9wcG9ydHVuaXR5U2NvcmU6IHsgc2NvcmU6IDAsIHJlYXNvbmluZzogXCJBbmFseXNpcyBjb3VsZCBub3QgYmUgY29tcGxldGVkIGR1ZSB0byBpbnN1ZmZpY2llbnQgZGF0YVwiIH0sXG4gICAgICAgICAgbXZwUmVjb21tZW5kZWRGZWF0dXJlczogeyBjb3JlOiBbXSwgZGlmZmVyZW50aWF0b3JzOiBbXSwgcG90ZW50aWFsOiBbXSB9LFxuICAgICAgICAgIGFpSW5zaWdodHM6IG51bGwsXG4gICAgICAgICAgYXBwc0FuYWx5emVkOiBhcHBJZHMsXG4gICAgICAgICAgYW5hbHlzaXNEYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5IHx8ICdVbmtub3duJyxcbiAgICAgICAgICBkYXRhUXVhbGl0eToge1xuICAgICAgICAgICAgYXBwc1dpdGhSZXZpZXdzOiAwLFxuICAgICAgICAgICAgdG90YWxBcHBzOiBhcHBJZHMubGVuZ3RoLFxuICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBkYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGFuYWx5emVNVlBPcHBvcnR1bml0eTonLCBlcnJvcik7XG4gICAgXG4gICAgLy8gUmV0dXJuIGZhbGxiYWNrIGRhdGEgaW5zdGVhZCBvZiB0aHJvd2luZyBlcnJvclxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBtYXJrZXRHYXBzOiBbXSxcbiAgICAgICAgbXZwT3Bwb3J0dW5pdHlTY29yZTogeyBzY29yZTogMCwgcmVhc29uaW5nOiBcIkFuYWx5c2lzIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuIFBsZWFzZSB0cnkgd2l0aCBkaWZmZXJlbnQgYXBwcyB0aGF0IGhhdmUgbW9yZSByZXZpZXdzLlwiIH0sXG4gICAgICAgIG12cFJlY29tbWVuZGVkRmVhdHVyZXM6IHsgY29yZTogW10sIGRpZmZlcmVudGlhdG9yczogW10sIHBvdGVudGlhbDogW10gfSxcbiAgICAgICAgYWlJbnNpZ2h0czogbnVsbCxcbiAgICAgICAgYXBwc0FuYWx5emVkOiBhcHBJZHMsXG4gICAgICAgIGFuYWx5c2lzRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnkgfHwgJ1Vua25vd24nLFxuICAgICAgICBkYXRhUXVhbGl0eToge1xuICAgICAgICAgIGFwcHNXaXRoUmV2aWV3czogMCxcbiAgICAgICAgICB0b3RhbEFwcHM6IGFwcElkcy5sZW5ndGgsXG4gICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0iXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJzZWFyY2hBcHBzIiwib3B0aW9ucyIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInRlcm0iLCJhcHBlbmQiLCJjYXRlZ29yeSIsInJlc3BvbnNlIiwiZmV0Y2giLCJ0b1N0cmluZyIsIm9rIiwiRXJyb3IiLCJqc29uIiwiZ2V0QXBwRGV0YWlscyIsImFwcElkIiwiZ2V0U2ltaWxhckFwcHMiLCJnZXRDYXRlZ29yaWVzIiwiZ2V0UmV2aWV3cyIsImZvcmNlIiwiZ2V0Q2FjaGVkUmV2aWV3cyIsImRlbGV0ZUNhY2hlZFJldmlld3MiLCJtZXRob2QiLCJhbmFseXplUmV2aWV3cyIsImdldEFuYWx5c2lzIiwiZ2V0Q2FjaGVkQW5hbHlzaXMiLCJjb21wYXJlQW5hbHlzaXMiLCJhcHBJZHMiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZGVudGlmeU1hcmtldEdhcHMiLCJhbmFseXplTVZQT3Bwb3J0dW5pdHkiLCJlcnJvckRhdGEiLCJtZXNzYWdlIiwiZSIsImRhdGEiLCJzdWNjZXNzIiwibWFya2V0R2FwcyIsIm12cE9wcG9ydHVuaXR5U2NvcmUiLCJzY29yZSIsInJlYXNvbmluZyIsIm12cFJlY29tbWVuZGVkRmVhdHVyZXMiLCJjb3JlIiwiZGlmZmVyZW50aWF0b3JzIiwicG90ZW50aWFsIiwiYWlJbnNpZ2h0cyIsImFwcHNBbmFseXplZCIsImFuYWx5c2lzRGF0ZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImRhdGFRdWFsaXR5IiwiYXBwc1dpdGhSZXZpZXdzIiwidG90YWxBcHBzIiwibGVuZ3RoIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.js\n"));

/***/ })

});