"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/reports/page",{

/***/ "(app-pages-browser)/./lib/api.js":
/*!********************!*\
  !*** ./lib/api.js ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeMVPOpportunity: function() { return /* binding */ analyzeMVPOpportunity; },\n/* harmony export */   analyzeReviews: function() { return /* binding */ analyzeReviews; },\n/* harmony export */   checkApiHealth: function() { return /* binding */ checkApiHealth; },\n/* harmony export */   compareAnalysis: function() { return /* binding */ compareAnalysis; },\n/* harmony export */   deleteCachedReviews: function() { return /* binding */ deleteCachedReviews; },\n/* harmony export */   getAnalysis: function() { return /* binding */ getAnalysis; },\n/* harmony export */   getAppDetails: function() { return /* binding */ getAppDetails; },\n/* harmony export */   getCachedAnalysis: function() { return /* binding */ getCachedAnalysis; },\n/* harmony export */   getCachedReviews: function() { return /* binding */ getCachedReviews; },\n/* harmony export */   getCategories: function() { return /* binding */ getCategories; },\n/* harmony export */   getReviews: function() { return /* binding */ getReviews; },\n/* harmony export */   getSimilarApps: function() { return /* binding */ getSimilarApps; },\n/* harmony export */   identifyMarketGaps: function() { return /* binding */ identifyMarketGaps; },\n/* harmony export */   searchApps: function() { return /* binding */ searchApps; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:30011/api\" || 0;\n/**\n * Search for apps by term or category\n * @param {Object} options - Search options\n * @param {string} options.term - Search term (optional)\n * @param {number} options.category - App Store category ID (optional)\n * @returns {Promise<Object>} - Search results\n */ async function searchApps(options) {\n    const params = new URLSearchParams();\n    if (options.term) params.append(\"term\", options.term);\n    if (options.category) params.append(\"category\", options.category);\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/search?\").concat(params.toString()));\n    if (!response.ok) {\n        throw new Error(\"Error searching apps\");\n    }\n    return response.json();\n}\n/**\n * Get app details by ID\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - App details\n */ async function getAppDetails(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/\").concat(appId));\n    if (!response.ok) {\n        throw new Error(\"Error getting app details\");\n    }\n    return response.json();\n}\n/**\n * Get similar apps based on an app ID\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - Similar apps\n */ async function getSimilarApps(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/\").concat(appId, \"/similar\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting similar apps\");\n    }\n    return response.json();\n}\n/**\n * Get app categories\n * @returns {Promise<Object>} - App categories\n */ async function getCategories() {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/apps/categories/list\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting categories\");\n    }\n    return response.json();\n}\n/**\n * Get reviews for an app\n * @param {string} appId - App Store ID\n * @param {boolean} force - Force refresh from App Store (optional)\n * @returns {Promise<Object>} - Reviews\n */ async function getReviews(appId) {\n    let force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const params = new URLSearchParams();\n    if (force) params.append(\"force\", \"true\");\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/reviews/\").concat(appId, \"?\").concat(params.toString()));\n    if (!response.ok) {\n        throw new Error(\"Error getting reviews\");\n    }\n    return response.json();\n}\n/**\n * Get cached reviews list\n * @returns {Promise<Object>} - Cached reviews list\n */ async function getCachedReviews() {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/reviews/cached/list\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting cached reviews\");\n    }\n    return response.json();\n}\n/**\n * Delete cached reviews for an app\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - Result\n */ async function deleteCachedReviews(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/reviews/\").concat(appId), {\n        method: \"DELETE\"\n    });\n    if (!response.ok) {\n        throw new Error(\"Error deleting cached reviews\");\n    }\n    return response.json();\n}\n/**\n * Analyze reviews for an app\n * @param {string} appId - App Store ID\n * @param {boolean} force - Force reanalysis (optional)\n * @returns {Promise<Object>} - Analysis results\n */ async function analyzeReviews(appId) {\n    let force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const params = new URLSearchParams();\n    if (force) params.append(\"force\", \"true\");\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/\").concat(appId, \"?\").concat(params.toString()), {\n        method: \"POST\"\n    });\n    if (!response.ok) {\n        throw new Error(\"Error analyzing reviews\");\n    }\n    return response.json();\n}\n/**\n * Get analysis for an app\n * @param {string} appId - App Store ID\n * @returns {Promise<Object>} - Analysis results\n */ async function getAnalysis(appId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/\").concat(appId));\n    if (!response.ok) {\n        throw new Error(\"Error getting analysis\");\n    }\n    return response.json();\n}\n/**\n * Get cached analysis list\n * @returns {Promise<Object>} - Cached analysis list\n */ async function getCachedAnalysis() {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/cached/list\"));\n    if (!response.ok) {\n        throw new Error(\"Error getting cached analysis\");\n    }\n    return response.json();\n}\n/**\n * Compare analysis of multiple apps\n * @param {Array} appIds - List of app IDs to compare\n * @returns {Promise<Object>} - Comparison results\n */ async function compareAnalysis(appIds) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/compare\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            appIds\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Error comparing analysis\");\n    }\n    return response.json();\n}\n/**\n * Identify market gaps based on app analysis\n * @param {Array} appIds - List of app IDs to analyze\n * @returns {Promise<Object>} - Market gap analysis\n */ async function identifyMarketGaps(appIds) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/market-gaps\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            appIds\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Error identifying market gaps\");\n    }\n    return response.json();\n}\n/**\n * Analyze opportunity for building an MVP based on similar apps\n * @param {Array} appIds - List of similar app IDs to analyze\n * @param {number} category - App category ID (optional)\n * @returns {Promise<Object>} - MVP opportunity analysis\n */ async function analyzeMVPOpportunity(appIds, category) {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/analysis/mvp-opportunity\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                appIds,\n                category\n            })\n        });\n        if (!response.ok) {\n            // Try to get error message from response\n            try {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Error analyzing MVP opportunity\");\n            } catch (e) {\n                throw new Error(\"Error analyzing MVP opportunity\");\n            }\n        }\n        const data = await response.json();\n        // If the backend didn't return valid opportunity data, provide fallback\n        if (!data.data || !data.success) {\n            return {\n                success: true,\n                data: {\n                    marketGaps: [],\n                    mvpOpportunityScore: {\n                        score: 0,\n                        reasoning: \"Analysis could not be completed due to insufficient data\"\n                    },\n                    mvpRecommendedFeatures: {\n                        core: [],\n                        differentiators: [],\n                        potential: []\n                    },\n                    aiInsights: null,\n                    appsAnalyzed: appIds,\n                    analysisDate: new Date().toISOString(),\n                    category: category || \"Unknown\",\n                    dataQuality: {\n                        appsWithReviews: 0,\n                        totalApps: appIds.length,\n                        error: true\n                    }\n                }\n            };\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in analyzeMVPOpportunity:\", error);\n        // Return fallback data instead of throwing error\n        return {\n            success: true,\n            data: {\n                marketGaps: [],\n                mvpOpportunityScore: {\n                    score: 0,\n                    reasoning: \"Analysis could not be completed. Please try with different apps that have more reviews.\"\n                },\n                mvpRecommendedFeatures: {\n                    core: [],\n                    differentiators: [],\n                    potential: []\n                },\n                aiInsights: null,\n                appsAnalyzed: appIds,\n                analysisDate: new Date().toISOString(),\n                category: category || \"Unknown\",\n                dataQuality: {\n                    appsWithReviews: 0,\n                    totalApps: appIds.length,\n                    error: true\n                }\n            }\n        };\n    }\n}\n/**\n * Check the health of the API server\n * @returns {Promise<Object>} - Health check result\n */ async function checkApiHealth() {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/health\"));\n        if (!response.ok) {\n            throw new Error(\"API server is not responding properly\");\n        }\n        return {\n            success: true,\n            data: await response.json()\n        };\n    } catch (error) {\n        console.error(\"API health check failed:\", error);\n        return {\n            success: false,\n            error: error.message || \"Could not connect to API server\"\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.js\n"));

/***/ })

});